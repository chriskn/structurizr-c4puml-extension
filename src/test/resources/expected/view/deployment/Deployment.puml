@startuml(id=Deployment)
!includeurl https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v11.1/dist/AWSCommon.puml
!includeurl https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v11.1/dist/Containers/EKSCloud.puml
!includeurl https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v11.1/dist/GroupIcons/Cloudalt.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/master/sprites/apple.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/master/sprites/docker-icon.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/master/sprites/kafka.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/master/sprites/nginx.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/master/sprites/postgresql.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/master/sprites/spring.puml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml
title System container - Deployment - Default
caption A deployment diagram showing the environment.

SHOW_PERSON_OUTLINE()
LAYOUT_LEFT_RIGHT()

AddRelTag("async relationship", $textColor="$ARROW_COLOR", $lineColor="$ARROW_COLOR", $lineStyle = DashedLine())

SetPropertyHeader("Property", "Value", "Description")
AddProperty("Property1", "Value1", "Description1")
AddProperty("Property2", "Value2", "Description2")
Node(Default.AWS, "AWS", "", "Production AWS environment", "Cloudalt"){
  Node(Default.AWS.AWSRDS, "AWS RDS", "", "", ""){
    WithoutPropertyHeader()
    AddProperty("region", "eu-central-1")
    ContainerDb(Default.AWS.AWSRDS.Database_1, "Database", "PostgreSql", "Stores data", "postgresql")
    WithoutPropertyHeader()
    AddProperty("region", "eu-west-1")
    ContainerDb(Default.AWS.AWSRDS.FailoverDatabase_1, "Failover Database", "PostgreSql", "Stores data", "postgresql")
  }
  Node(Default.AWS.EKScluster, "EKS cluster", "", "", "EKSCloud"){
    Node(Default.AWS.EKScluster.mywebapp, "my.web.app", "", "Web App POD", ""){
      Node(Default.AWS.EKScluster.mywebapp.WebAppcontainer, "Web App container", "", "", "docker-icon"){
        Node(Default.AWS.EKScluster.mywebapp.WebAppcontainer.JaegerSidecar, "Jaeger Sidecar", "", "Jaeger sidecar sending Traces", "")
        Container(Default.AWS.EKScluster.mywebapp.WebAppcontainer.WebApplication_1, "Web Application", "Java and Spring MVC", "Spring Boot web application", "spring")
      }
    }
    SetPropertyHeader("Property", "value")
    AddProperty("IP", "10.234.234.132")
    Node(Default.AWS.EKScluster.LoadBalancer, "Load Balancer", "nginx", "Nginx Load Balancer", "nginx", $link="https://www.google.de")
  }
}
Node(Default.AnotherAWSAccount, "Another AWS Account", "", "", "Cloudalt"){
  Node(Default.AnotherAWSAccount.JaegerContainer, "Jaeger Container", "", "", ""){
    Node(Default.AnotherAWSAccount.JaegerContainer.Jaeger, "Jaeger", "", "", "")
  }
}
Node(Default.AppleDevice, "Apple Device", "", "", "apple"){
  System_Ext(Default.AppleDevice.iOSApp_1, "iOS App", "iOS Application", "")
}
Rel(Default.AppleDevice, Default.AWS.EKScluster.LoadBalancer, "requests data from")
Rel_R(Default.AWS.AWSRDS.Database_1, Default.AWS.AWSRDS.FailoverDatabase_1, "replicates data to")
SetPropertyHeader("key", "value")
AddProperty("ip", "10.234.12.13")
Rel(Default.AWS.EKScluster.mywebapp.WebAppcontainer.JaegerSidecar, Default.AnotherAWSAccount.JaegerContainer, "writes traces to", $sprite=kafka, $link="https://www.jaegertracing.io/", $tags="async relationship")
Rel_R(Default.AWS.EKScluster.LoadBalancer, Default.AWS.EKScluster.mywebapp.WebAppcontainer, "forwards requests to")
Rel(Default.AWS.EKScluster.mywebapp.WebAppcontainer.WebApplication_1, Default.AWS.AWSRDS.Database_1, "stores data in", "JDBC")

skinparam nodesep 50
skinparam ranksep 50
SHOW_LEGEND(true)

@enduml