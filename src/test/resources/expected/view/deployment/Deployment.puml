@startuml(id=Deployment)
!define GILBARBARA_PNG_URL https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/v1.1/pngs
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml
!includeurl <awslib14/AWSCommon>
!includeurl <k8s/Common>
!includeurl <awslib14/Containers/EKSCloud>
!includeurl <awslib14/Database/AuroraPostgreSQLInstance>
!includeurl <awslib14/Groups/AWSCloudAlt>
!includeurl <k8s/OSS/KubernetesCronjob>
!includeurl <logos/nginx>
!includeurl <logos/postgresql>
!includeurl <logos/spring>
!includeurl <tupadr3/devicons/apple>
!includeurl <tupadr3/devicons2/jaegertracing>

title System container - Deployment - Default
caption A deployment diagram showing the environment.

skinparam PackageTitleAlignment Center
SHOW_PERSON_OUTLINE()
LAYOUT_LEFT_RIGHT()

AddRelTag("async relationship", $lineStyle=DashedLine(), $legendText=async relationship (dashed))

SetPropertyHeader("Property", "Value", "Description")
AddProperty("Property1", "Value1", "Description1")
AddProperty("Property2", "Value2", "Description2")
Node(Default.AWS, "AWS", "", "Production AWS environment", $sprite="AWSCloudAlt,color=#232f3e") {
  Node(Default.AWS.AWSRDS, "AWS RDS", "", "", $sprite="AuroraPostgreSQLInstance,color=#c925d1") {
    WithoutPropertyHeader()
    AddProperty("region", "eu-central-1")
    ContainerDb(Default.AWS.AWSRDS.Database_1, "Database", "PostgreSql", "Stores data", $sprite="postgresql")
    WithoutPropertyHeader()
    AddProperty("region", "eu-west-1")
    ContainerDb(Default.AWS.AWSRDS.FailoverDatabase_1, "Failover Database", "PostgreSql", "Stores data", $sprite="postgresql")
  }
  Node(Default.AWS.EKScluster, "EKS cluster", "", "", $sprite="EKSCloud,color=#ed7100") {
    Node(Default.AWS.EKScluster.mywebapp, "my.web.app", "", "Web App POD") {
      Node(Default.AWS.EKScluster.mywebapp.WebAppcontainer, "Web App container", "", "", $sprite="img:GILBARBARA_PNG_URL/docker.png") {
        Node(Default.AWS.EKScluster.mywebapp.WebAppcontainer.JaegerSidecar, "Jaeger Sidecar", "", "Jaeger sidecar sending Traces", $sprite="jaegertracing,color=#add8e6")
        Container(Default.AWS.EKScluster.mywebapp.WebAppcontainer.WebApplication_1, "Web Application", "Java and Spring MVC", "Spring Boot web application", $sprite="spring")
      }
    }
    SetPropertyHeader("Property", "value")
    AddProperty("IP", "10.234.234.132")
    Node(Default.AWS.EKScluster.LoadBalancer, "Load Balancer", "nginx", "Nginx Load Balancer", $sprite="nginx", $link="https://www.google.de")
  }
}
Node(Default.AnotherAWSAccount, "Another AWS Account", "", "", $sprite="AWSCloudAlt,color=#232f3e") {
  Node(Default.AnotherAWSAccount.JaegerContainer, "Jaeger Container", "", "", $sprite="img:GILBARBARA_PNG_URL/docker.png") {
    Node(Default.AnotherAWSAccount.JaegerContainer.Jaeger, "Jaeger", "", "", $sprite="jaegertracing,color=#add8e6")
  }
}
Node(Default.AppleDevice, "Apple Device", "", "", $sprite="apple") {
  System_Ext(Default.AppleDevice.iOSApp_1, "iOS App", "iOS Application")
}
Rel(Default.AppleDevice, Default.AWS.EKScluster.LoadBalancer, "requests data from")
Rel_R(Default.AWS.AWSRDS.Database_1, Default.AWS.AWSRDS.FailoverDatabase_1, "replicates data to")
SetPropertyHeader("key", "value")
AddProperty("ip", "10.234.12.13")
Rel(Default.AWS.EKScluster.mywebapp.WebAppcontainer.JaegerSidecar, Default.AnotherAWSAccount.JaegerContainer, "writes traces to", $sprite="KubernetesCronjob,color=#66abdd", $link="https://www.jaegertracing.io/", $tags="async relationship")
Rel_R(Default.AWS.EKScluster.LoadBalancer, Default.AWS.EKScluster.mywebapp.WebAppcontainer, "forwards requests to")
Rel(Default.AWS.EKScluster.mywebapp.WebAppcontainer.WebApplication_1, Default.AWS.AWSRDS.Database_1, "stores data in", "JDBC")

skinparam nodesep 50
skinparam ranksep 50
SHOW_LEGEND(true)

@enduml